(use tree-manual.uscm)

(val list '())

(define path (n t)
    (begin
	 (if 
	  (not (tree? t)) 'error
	  (if (not (tree-search n t)) #f
	   (if (= n (tree-datum t)) 
        (begin
         (println list)
         (set list '())
        )
	    (if (< n (tree-datum t))
         (begin 
          (path n (tree-left t))
          (set list (cons 'left list))
         )
         (begin
          (path n (tree-right t))
          (set list (cons 'right list))
         ) 
        ) 
	   )
      )
     )
    )
)

(path 12 (tree-add 12 (tree-add 11 (tree-add 15 (tree-add 9 (tree-add 8 (tree-add 2 (tree-add 1 (tree-add 5 (tree-add 3 (tree-add 7 (tree-make-null))))))))))))
(path 2 (tree-add 12 (tree-add 11 (tree-add 15 (tree-add 9 (tree-add 8 (tree-add 2 (tree-add 1 (tree-add 5 (tree-add 3 (tree-add 7 (tree-make-null))))))))))))

(val exploded '())

(define explode-digits (n)

    (begin

        (set exploded '())

        (while (>= n 1)
            (begin
                
                (set exploded (cons (mod n 10) exploded))
                (set n (/ n 10))

            )
        )

        (println exploded)

    )
)

(explode-digits 123456789)
(explode-digits 2468)

(val imploded 1)
(val j 0)
(val counter 1)

(define implode-digits (n)

    (begin

        (set imploded 1)
        (set j 0)
        (set counter 1)

        (while (not (null? (cdr n)))
            (begin
                (set imploded (* imploded 10))
                (set imploded (+ imploded (car n)))
                (set n (cdr n))
                (set j (+ j 1))

            )
        )

        (set imploded (* imploded 10))
        (set imploded (+ imploded (car n)))

        (while (> j -1)
            (begin

                (set counter (* counter 10))
            
                (set j (- j 1))

            )
        )

        (set imploded (- imploded counter))
        (println imploded)

    )
)

(implode-digits '(1 2 3 4))
(implode-digits '(2 4 6 8))

(val sum 0)

(val bool 0)

(val check 0)

(define equal-length (l1 l2)

    (begin 

        (set check 0)
        (set bool 0)

        (while (= check 0)

            (begin

                (if (and (null? (cdr l1)) (null? (cdr l2)))

                    (begin

                        (set bool 1)
                        (set check 1)

                    )

                    (if (null? (cdr l1))

                        (set check 1)

                        (if (null? (cdr l2))

                            (set check 1)

                            (begin

                                (set l1 (cdr l1))
                                (set l2 (cdr l2))

                            )
                        )
                    )
                )
            )
        )

        (println bool)

    )
  )

(equal-length '(1 2 3 1) '(2 3 3 4))
(equal-length '(1 2 3) '(2 3 3 4))
(equal-length '(1 2 3 1) '(2 3 3))
(equal-length '(1 2) '(2 3))

(define dot-product (l1 l2)

    (begin
    
        (set sum 0)

        (if (= (equal-length l1 l2) 1)

            (begin

                (while (not (null? (cdr l1)))

                    (begin

                        (set sum (+ sum (* (car l1) (car l2) )))

                        (set l1 (cdr l1))

                        (set l2 (cdr l2))

                    )
                )

                (set sum (+ sum (* (car l1) (car l2) )))

            )

            0

        )

        (println sum)

    )
)

(dot-product '(1 2 3) '(2 3 1))
(dot-product '(1 2 3) '(2 3 4))
(dot-product '(1 2 3) '(2 3))
(dot-product '(1 2 3) '(2 3 8 9))

(define count (key list)

    (begin

        (set sum 0)
    
        (while (not (null? (cdr list)))

            (begin

                (if (pair? (car list))

                    (set list (cdr list))

                    (begin
                    
                        (if (= (car list) key)
                        
                            (set sum (+ sum 1))

                            0

                        )

                        (set list (cdr list))
                    
                    )
                )
            )
        )

        (if (pair? (car list))

                    (set list (cdr list))

                    (begin
                    
                        (if (= (car list) key)
                        
                            (set sum (+ sum 1))

                            0

                        )

                        (set list (cdr list))
                    
                    )
                )

        (println sum)

    )
)


(count 'a '(a (a a a) a))
(count 'a '(a b a c a))
(count '1 '(1 2 3 4 1))
(count '() '(1 2 3))

(define countall (key list)

    (begin
    
        (set sum 0)

    )

)

(val mirror '())

(define mirror (list) 

    (being

        (set mirror '())
    
        (while (not (null? (cdr list)))

            (begin

                (if (pair? (car list))

                    (set list (cdr list))

                    (begin
                    
                        (if (= (car list) key)
                        
                            (set sum (+ sum 1))

                            0

                        )

                        (set list (cdr list))
                    
                    )
                )
            )
        )
    
    )

)
